version: "3.8"

services:
  # 1) Прокси‑сервер nginx, который подхватит ваш wildcard-сертификат
  nginx-proxy:
    image: jwilder/nginx-proxy:latest
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certbot-dns/conf:/etc/nginx/certs:ro
      - ./nginx/vhost.d:/etc/nginx/vhost.d:ro
      - nginx_html:/usr/share/nginx/html:rw
    networks:
      - app-network

  # 2) Контейнер для получения и обновления сертификата через DNS-01
  certbot-dns:
    image: certbot/certbot:latest
    container_name: certbot-dns
    volumes:
      - ./certbot-dns/conf:f/etc/letsencrypt
      - ./certbot-dns/cloudflare.ini:/etc/cloudflare.ini:ro
    entrypoint: /bin/sh
    command: -c "
      pip install certbot-dns-cloudflare
      certbot certonly \
        --dns-cloudflare \
        --dns-cloudflare-credentials /etc/cloudflare.ini \
        --dns-cloudflare-propagation-seconds 60 \
        --non-interactive \
        --agree-tos \
        --email fedorovkola2017@gmail.com \
        -d exhibitdes.ru -d '*.exhibitdes.ru'
      "
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 1423
      MYSQL_DATABASE: test
      MYSQL_USER: user
      MYSQL_PASSWORD: 1423
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user", "-p1423"]
      interval: 5s
      timeout: 5s
      retries: 15
    command:
      --default-authentication-plugin=mysql_native_password
      --skip-log-bin
      --log-slave-updates=OFF
    networks:
      - app-network

  backend:
    build:
      context: ./backend
    container_name: backend
    volumes:
      - photos_volume:/storage/photos
    environment:
      DB_HOST: mysql
      DB_USER: user
      DB_PASSWORD: 1423
      DB_NAME: test
      VIRTUAL_HOST: www.exhibitdes.ru
      VIRTUAL_PORT: 8000
    depends_on:
      - mysql
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      target: prod
    container_name: frontend
    volumes:
      - photos_volume:/app/public/picture:ro
    environment:
      NEXT_PUBLIC_BASE_URL: https://exhibitdes.ru
      VIRTUAL_HOST: exhibitdes.ru
      PORT: 80
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    labels:
      - VIRTUAL_HOST=exhibitdes.ru
      - VIRTUAL_PORT=8080
      - VIRTUAL_PATH=/admin
    networks:
      - app-network

volumes:
  mysql_data:
  nginx_html:
  photos_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/storage/photos

networks:
  app-network:
    driver: bridge
